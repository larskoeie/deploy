#!/bin/sh
#
# - Command 'diff' uses rsync with --delete, real transfer commands do not ! So nothing will ever be deleted.
#

#
# Reads state variables. 
# Reads config file (.deploy.cnf) and apply values to global variables for later use.
#
read_config () {
  REMOTEINDEX=""
  if [ -f .deploy.state ]; then
    f=`cat .deploy.state | cut -d = -f 1`
    v=`cat .deploy.state | cut -d = -f 2`
    if [ "$f" = "remote" ]; then
      REMOTEINDEX=$v
    fi
  fi
  if [ -f .deploy.cnf ]
  then
    while read p; do
      f=`echo $p | cut -d = -f 1`
      r=`echo $f | cut -d . -f 1`
      field=`echo $f | cut -d . -f 2`
      value=`echo $p | cut -d = -f 2`

      if [ "$r" = "local" ];
      then
        case $field in
          "dbhost" ) LOCALDBHOST=$value ;;
          "dbuser" ) LOCALDBUSER=$value ;;
          "db" ) LOCALDB=$value ;;
        esac
      else
        if [ -z "$REMOTEINDEX" ]; then
          REMOTEINDEX=$r
          write_state
          echo "Remote not set. Switched to $REMOTEINDEX"
        fi
      fi
      if [ "$r" = "$REMOTEINDEX" ];
      then
        case $field in
          "type" ) REMOTETYPE=$value ;;
          "title" ) REMOTETITLE=$value ;;
          "host" ) REMOTEHOST=$value ;;
          "user" ) REMOTEUSER=$value ;;
          "root" ) REMOTEROOT=$value ;;
          "httpfolder" ) REMOTEHTTPFOLDER=$value ;;
          "dbhost" ) REMOTEDBHOST=$value ;;
          "dbuser" ) REMOTEDBUSER=$value ;;
          "db" ) REMOTEDB=$value ;;
        esac
      fi
    done < .deploy.cnf
  fi
}

#
# Write state variables to file.
#
write_state () {
  echo "remote=$REMOTEINDEX" > .deploy.state
}

#
# Require that the current directory is the one above http/
require_site_root () {
  if [ ! -d "http" ]; then echo "Not site root."; exit 1;
  fi
}

#
# Make sure that configuration for remote site exists. This is required for most commands.
#
require_remote () {
  if [ ! $REMOTEROOT ]
  then
    echo "Missing remote root"; exit;
  fi
  case $REMOTETYPE in
    "local" )
      if [ $LOCALROOT$LOCALHTTPFOLDER = $REMOTEROOT$REMOTEHTTPFOLDER ]; then echo "Remote site is same as local."; exit;
      fi
    ;;
    "ssh" )
      if [ ! $REMOTEHOST ]; then echo "Missing remote host"; exit;
      fi
      if [ ! $REMOTEUSER ]; then echo "Missing remote user"; exit;
      fi
    ;;
    "ftp" )
      if [ ! $REMOTEHOST ]; then echo "Missing remote host"; exit;
      fi
      if [ ! $REMOTEUSER ]; then echo "Missing remote user"; exit;
      fi
    ;;
  esac
}

#
# Make sure that SSH connection to remote exists.
#
require_ssh () {
  if [ $REMOTETYPE != "ssh" ]; then
    echo "SSH mode only."
    exit 1;
  fi
}

#
# Make sure that configuration for the local DB exists.
#
require_localdb () {
  if [ -z $LOCALDB ]; then echo "No local DB configured."; exit 1;
  fi
}

#
# Make sure that configuration for a remote DB exists.
#
require_remotedb () {
 if [ ! -n "$REMOTEDB" ]; then echo "No remote DB configured."; exit 1;
 fi
}

#
# Dump remote DB to file and download the file.
#
remote_dumpdb () {
  require_ssh
  require_remotedb
  DUMPPATH="$REMOTEINDEX.sql"
  echo "Dumping $REMOTEDB on $REMOTEDBUSER@$REMOTEDBHOST ..."
  ssh $REMOTEUSER@$REMOTEHOST "mysqldump --skip-extended-insert -h $REMOTEDBHOST -u $REMOTEDBUSER -p $REMOTEDB > ~/temp.sql"
  echo "Downloading dump ..."
  scp $REMOTEUSER@$REMOTEHOST:~/temp.sql $DUMPPATH
}

#
# Dump local DB to file.
#
local_dumpdb () {
  require_localdb
  DUMPPATH="local.sql"
  # --skip-extended-insert makes dump larger, but provides better results with diff later on
  echo "Dumping $LOCALDB on $LOCALDBUSER@$LOCALDBHOST ..."
  mysqldump --skip-extended-insert $ignoretables -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB > $DUMPPATH
}

#
# Import dump from remote site to local DB
#
local_importremotedb () {
  require_localdb
  echo "Importing file $REMOTEINDEX.sql ..."
  mysql -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB < $REMOTEINDEX.sql
}

#
# Execute SQL query on local DB.
#
local_sqlq () {	
  echo $1 > deploy-temp.sql;
  mysql -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB < deploy-temp.sql
}

# 
# Executes SQL query on DB.
#
sqlq () {
	# for now, pass query on to local DB
	local_sqlq "$1"
}

# Absolute path to this script
SCRIPT=$(readlink -f $0)
# Absolute path this script is in
SCRIPTPATH=`dirname $SCRIPT`
# The current working directory
LOCALROOT=`pwd`

# apply sane config default values
LOCALHTTPFOLDER="http/"
REMOTEHTTPFOLDER="http/"
REMOTEINDEX=""
REMOTETYPE="ssh" # "local", "ssh" or "ftp"
REMOTETITLE=""
LOCALSITENAME=`basename $LOCALROOT`
TIME=`date +"%y%m%d"`
DIFFCOLORSED='s/^-/\x1b[41m-/;s/^+/\x1b[44m+/;s/$/\x1b[0m/'
RSYNCCOLORSED="s/<f/\x1b[44m&/g;s/>f/\x1b[44m&/g;s/$/\x1b[0m/g"
EXCLUDEFROM="--exclude-from $SCRIPTPATH/deploy-exclude.txt"


USAGE="Usage: deploy <command> [path]
  General commands :
    config
      Output current configuration.
    diff
      Show files and folders in specified path on local that are not on remote or have different size or timestamp
    diffdb
      Not on FTP mode.
    down
      Download the specified path from remote to local
    downdb
      Dump remote db to file, download file and import into local db.
    dumplocaldb
      Dump the local db to local file
    dumpremotedb
      Dump the remote db to local file. Not on FTP mode.
    up
      Upload the specified path from local to remote
    remote
      Switch remote.
";

#
# Source system specific scripts. These script have responsibility for only invoking if appropriate.
#
#. deploy-typo3
. deploy-drupal7

# If no command, show usage
if [ ! -n "$1" ]; then echo "$USAGE"; exit 1;
fi

require_site_root
read_config

#
# Reads a password from prompt. Show *'s
#
read_pw () {
  unset pw
  while IFS=`read -s -p "Enter :$prompt" -r char`
  do
    if [ "$char" = $'\0' ]
    then
      break
    fi
    prompt='*'
    pw="$pw$char"
  done
  echo
  return $pw
}

if [ "$REMOTETYPE" = "ftp" ]; then
  unset REMOTEPASSWORD
  prompt="FTP password for $REMOTEUSER@$REMOTEHOST : "
  while IFS= read -p "$prompt" -r -s -n 1 char
  do
      if [ $char = $'\0' ]
      then
          break
      fi
      prompt='*'
      REMOTEPASSWORD+="$char"
  done
  echo
  if [ ! -d ".deploy/remote/$REMOTEINDEX" ]; then
  	mkdir -p .deploy/remote/$REMOTEINDEX
  fi

fi

# Make path and folder names sane. Make sure that dirs have trailing slashes and files haven't.
if [ -n "$2" ]; then
	# remove trailing slashes from all vars
	REMOTEROOT=`echo $REMOTEROOT | sed "s/\/*$//g"` 
	LOCALHTTPFOLDER=`echo $LOCALHTTPFOLDER | sed "s/\/*$//g"` 
	REMOTEHTTPFOLDER=`echo $REMOTEHTTPFOLDER | sed "s/\/*$//g"` 

	# make paths
	LOCALPATH=$2
	REMOTEPATH=`echo "$LOCALPATH" | sed "s/^$LOCALHTTPFOLDER/$REMOTEHTTPFOLDER/g"`  

	LOCALPATH=`echo $LOCALPATH | sed "s/\/*$//g"` 
	REMOTEPATH=`echo $REMOTEPATH | sed "s/\/*$//g"` 

	# add trailing slashes
	LOCALROOT="$LOCALROOT/"
	REMOTEROOT="$REMOTEROOT/"
	LOCALHTTPFOLDER="$LOCALHTTPFOLDER/"	
	REMOTEHTTPFOLDER="$REMOTEHTTPFOLDER/"	
	
	# if path on local is a directory, add trailing slash, on local AND on remote
	if [ -d "$LOCALPATH" ]; then
	  LOCALPATH="$LOCALPATH/"
	  REMOTEPATH="$REMOTEPATH/"
	fi

	if [ "$REMOTETYPE" = "local" ] && [ "$LOCALROOT$LOCALPATH" = "$REMOTEROOT$REMOTEPATH" ]; then
		echo "Local and remote site are in the same place."
		exit
	fi
fi

#. deploy-typo3
#. deploy-drupal7

if [ -n "$REMOTETITLE" ] && [ "$1" != "remote" ]
then
  echo "On remote $REMOTETITLE"
fi

if [ $handled ]; then
  exit 0;
fi

#
# Now go to action
#
case "$1" in
  "remote" )
    if [ ! -n "$2" ]; then
      echo "Usage: deploy remote <remote>";
    fi
    if [ -f .deploy.cnf ]
      then
        while read p; do
          f=`echo $p | cut -d = -f 1`
          r=`echo $f | cut -d . -f 1`
          field=`echo $f | cut -d . -f 2`
          value=`echo $p | cut -d = -f 2`

          if [ "$r" = "$REMOTEINDEX" ];
          then
            echo " * $r"
          else
            echo "   $r"
          fi
        done < .deploy.cnf
      fi
    else
      REMOTEINDEX=$2
      write_state
      read_config
      echo "Switched to remote $REMOTETITLE"
    fi
    ;;
 
  "config" )
    echo "Local DB host  : $LOCALDBHOST"
    echo "Local DB user  : $LOCALDBUSER"
    echo "Local DB       : $LOCALDB"
    echo "Remote host    : $REMOTEHOST"
    echo "Remote user    : $REMOTEUSER"
    echo "Remote root    : $REMOTEROOT"
    echo "Remote DB host : $REMOTEDBHOST"
    echo "Remote DB user : $REMOTEDBUSER"
    echo "Remote DB      : $REMOTEDB"
    ;;
 
  #
  # Will make a rsync dry-run or a diff depending on type of localpath.
  #
  "diff" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy diff <path>"; exit 1; 
    fi

    if [ -f $LOCALPATH ]; then echo -n "Local file :  "; ls -l $LOCALPATH
    fi
    
    case "$REMOTETYPE" in
      "local" )
        if [ -f $LOCALPATH ] && [ -f $REMOTEROOT$REMOTEPATH ]
        then          
          echo -n "Remote file : "
          ls -l $REMOTEROOT$REMOTEPATH
          diff -w -u $REMOTEROOT$REMOTEPATH $LOCALPATH | sed $DIFFCOLORSED
        else
          rsync -avnci $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH | grep ">f" | sed $RSYNCCOLORSED
        fi

      ;;
      "ssh" )
        if [ -f $LOCALPATH ]
        then
          echo "Blue lines are added on local - red are removed"
          # do an actual diff on two files
          ssh $REMOTEUSER@$REMOTEHOST "cat $REMOTEROOT$REMOTEPATH" | diff -w -u - "$LOCALPATH" | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]
        then
          # diff folder structure using rsync dry-run
          echo "Blue lines are changed or added on local - red are removed."
          rsync -avnci --delete $EXCLUDEFROM ${2%/}/ $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED
        fi
      ;;

      "ftp" )
        cd .deploy/remote/$REMOTEINDEX
        wget -r -nH -nv ftp://$REMOTEUSER:$REMOTEPASSWORD@$REMOTEHOST//$REMOTEPATH
        cd ../../..
        if [ -f $LOCALPATH ]
        then
          echo "Blue lines are added on local - red are removed"
          # do an actual diff on two files
          diff -w -u $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]
        then
          # diff structures using rsync
          echo "Blue lines are changed or added on local."
          rsync -avnci $EXCLUDEFROM $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED

        fi

      ;;
    esac
    ;;

  "diffdb" )
    # do a diff on the two db-dump files
    LOCAL="local.sql"
    REMOTE="$REMOTEINDEX.sql"

    if [ ! -f $LOCAL ]
      then echo "no local dump - use dumplocaldb"; exit;
    fi
    if [ ! -f $REMOTE ]
      then echo "no remote dump - use dumpremotedb"; exit;
    fi

    diff $LOCAL $REMOTE | sed $DIFFCOLORSED
  ;;
 
  # diff and grep for text within diff result
  # TODO : remotetype ftp not implemented 
  "diffsearch" )
    if [ ! -n "$3" ]; then echo "Usage: deploy diffsearch <path> <string>"; exit 1;
    fi

    echo "Diffing '$LOCALPATH' and searching for '$3' ...";
    echo "Blue lines are added on local - red are removed"

    case "$REMOTETYPE" in 
      "local" )
        if [ -f $LOCALPATH ]; then
          diff -w -u $REMOTEROOT$REMOTEPATH $LOCALPATH | grep $3 | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]; then
          rsync -avnc $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH | grep $3 | sed $RSYNCCOLORSED
        fi
      ;;
      
      "ssh" )
        if [ -f $LOCALPATH ]; then
          ssh $REMOTEUSER@$REMOTEHOST "cat $REMOTEROOT$REMOTEPATH" | diff -w -u - "$LOCALPATH" | grep $3 | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]; then
          rsync -avnc $EXCLUDEFROM ${2%/}/ $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH | grep $3 | sed $RSYNCCOLORSED
        fi
      ;;
      
      "ftp" )
      ;;
    esac  
  ;;
  "down" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy down <path>"; exit 1;
    fi

    # check if "http/" is owned by the current user. If not, downloading files will probably cause trouble. Confirm.
    HTTPOWNER=$(stat -c %U http)
    if [ $HTTPOWNER != $(id -u -n) ]; then
      echo "You are not $HTTPOWNER. Continue? y/n";
      prompt=""
      read -p "$prompt" -r -s -n 1 char
      if [[ $char != "y" ]]
      then
        echo;
        exit;
      fi

    fi

    echo "Downloading $LOCALPATH ...";
    case "$REMOTETYPE" in
      "local" )
        rsync -avci $REMOTEROOT$REMOTEPATH $LOCALPATH | sed $RSYNCCOLORSED        
      ;;
      "ssh" )
        # download structure or single file using rsync
        rsync -avi $EXCLUDEFROM $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH $LOCALPATH
        ;;
      "ftp" )
        cd .deploy/remote/$REMOTEINDEX
        wget -r -nH ftp://$REMOTEUSER:$REMOTEPASSWORD@$REMOTEHOST//$REMOTEPATH
        cd ../../..
        rsync -avi $EXCLUDEFROM .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH $LOCALPATH
        ;;
    esac
    ;;
  "downdb" )
    remote_dumpdb
    local_importremotedb
    ;;
  "dumplocaldb" )
    # this dump is specifically with diff in mind
    if [ ! -n "$LOCALDB" ]; then echo "Missing localdb - check .deploy.cnf"; exit 1;
    fi
    DUMPPATH="$LOCALSITENAME-local.sql"
    #ignoretables=""
    # determine ignore-tables - this is based on type of system
    #if [ ISTYPO3 ]; then
    #  ignoretables=`mysql -DN $LOCALDB -e "show tables like '%cache%'" | awk '{printf " --ignore-table='$LOCALDB'."$1" "}'`
    #fi
    echo "Dumping to $DUMPPATH ..."
    # --skip-extended-insert makes dump larger, but provides better results with diff later on
    mysqldump --skip-extended-insert $ignoretables -h $LOCALDBHOST -u $LOCALDBUSER -p $LOCALDB > $DUMPPATH
    ;;

  "dumpremotedb" )
    remote_dumpdb
    ;;

  "sqlq" )
    if [ ! -n "$2" ]; then echo "Usage: deploy sqlq <sql>"; exit 1;
    fi
    sqlq "$2"

    ;;
  "up" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy up <path>"; exit 1; 
    fi
    echo -n "This will upload $LOCALPATH to $REMOTETITLE. Continue? y/n : ";
    read -r c
    if [ "$c" != "y" ]
    then
      echo "Aborted";
      exit;
    fi

    echo "Uploading $LOCALPATH ...";
    case $REMOTETYPE in 
      "local" )
        rsync -avci $LOCALPATH $REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED        
      ;;
      "ssh" )
        rsync -avci $EXCLUDEFROM $LOCALPATH $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH
      ;;
      "ftp" )
        rsync -avnic $EXCLUDEFROM $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH
        cd .deploy/remote/$REMOTEINDEX
#        echo  <<EOF
#open $REMOTEHOST
#user $REMOTEUSER $REMOTEPASSWORD
#put $REMOTEROOT$REMOTEPATH
#EOF 
      ;;
    esac
    ;;

  # create tar with folder
  "dumplocal" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy dumplocal <path>"; exit 1;
    fi

    DUMPPATH=`echo $LOCALSITENAME-local-$LOCALPATH | sed 's/\//-/g'`
    echo $DUMPPATH

    tar -cvfz $DUMPPATH.tar.gz $LOCALPATH
    ;;

  "importlocaldb" )
    require_localdb
    if [ -z $2 ]; then
      echo "Usage: deploy importlocaldb <file>"
      exit 1;
    fi
    mysql -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB < $2
    ;;
esac

#if [ -f deploy-temp.sql ]; then rm deploy-temp.sql;
#fi

