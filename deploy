#!/bin/sh
#
#

#
# Reads state variables. 
# Reads config file (.deploy.cnf) and apply values to global variables for later use.
#
read_config () {
	# --- for backwards compatibility
  if [ -f .deploy.cnf ]; then
    mv .deploy.cnf .deploy/config
  fi
  if [ -f .deploy.state ]; then
    mv .deploy.state .deploy/state
  fi
  # --- 
  
  REMOTEINDEX=""
  if [ -f .deploy/state ]; then
    f=`cat .deploy/state | cut -d = -f 1`
    v=`cat .deploy/state | cut -d = -f 2`
    if [ "$f" = "remote" ]; then
      REMOTEINDEX=$v
    fi
  fi
  if [ -f .deploy/config ]
  then
    while read p; do
      f=`echo $p | cut -d = -f 1`
      r=`echo $f | cut -d . -f 1`
      field=`echo $f | cut -d . -f 2`
      value=`echo $p | cut -d = -f 2`

      if [ "$r" = "local" ];
      then
        case $field in
          "user" ) LOCALUSER=$value ;;
          "url" ) LOCALURL=$value ;;
          "dbhost" ) LOCALDBHOST=$value ;;
          "dbuser" ) LOCALDBUSER=$value ;;
          "db" ) LOCALDB=$value ;;
        esac
      else
        if [ ! -n "$REMOTEINDEX" ]; then
          REMOTEINDEX=$r
          write_state
          echo "Remote not set. Switched to $REMOTEINDEX"
        fi
      fi
      if [ "$r" = "$REMOTEINDEX" ];
      then
        case $field in
          "type" ) REMOTETYPE=$value ;;
          "title" ) REMOTETITLE=$value ;;
          "host" ) REMOTEHOST=$value ;;
          "port" ) REMOTEPORT=$value ;;
          "user" ) REMOTEUSER=$value ;;
          "root" ) REMOTEROOT=$value ;;
          "httpfolder" ) REMOTEHTTPFOLDER=$value ;;
          "dbhost" ) REMOTEDBHOST=$value ;;
          "dbuser" ) REMOTEDBUSER=$value ;;
          "db" ) REMOTEDB=$value ;;
          "dbdump" ) REMOTEDBDUMP=$value ;;
          "url" ) REMOTEURL=$value ;;
          "key" ) REMOTEKEY=$value ;;
        esac
      fi
    done < .deploy/config
  fi
}

#
# Write state variables to file.
#
write_state () {
  echo "remote=$REMOTEINDEX" > .deploy/state
}

#
# Shows a prompt, waits for response and returns
#
deploy_confirm () {
	echo -n "$1 (y/n)"
	read -r c
	if [ "$c" != "y" ]
	then
	  exit;
	fi
}

#
# Shows a prompt, waits for response and exits if negative
#
deploy_confirm_or_exit () {
	echo -n "$1 Continue ? (y/n)"
	read -r c
	if [ "$c" != "y" ]
	then
	  echo "Aborted";
	  exit;
	fi
}

#
# Sends a string to log and to stdout.
#
deploy_log () {
  t=`date +"%Y.%m.%d %H.%M.%S"`
  echo "$t - $1" >> $LOCALROOT/.deploy/log
  echo "$1"
}

#
# Require that the current directory is the one above http/
#
require_site_root () {
  if [ ! -d "http" ]; then echo "Not site root."; exit 1;
  fi
}

#
# Make sure that configuration for remote site exists. This is required for most commands.
#
require_remote () {
  if [ ! $REMOTEROOT ]
  then
    echo "Missing remote root"; exit;
  fi
  case $REMOTETYPE in
    "local" )
      if [ $LOCALROOT$LOCALHTTPFOLDER = $REMOTEROOT$REMOTEHTTPFOLDER ]; then echo "Remote site is same as local."; exit;
      fi
    ;;
    "ssh" )
      if [ ! $REMOTEHOST ]; then echo "Missing remote host"; exit;
      fi
      if [ ! $REMOTEUSER ]; then echo "Missing remote user"; exit;
      fi
    ;;
    "ftp" )
      if [ ! $REMOTEHOST ]; then echo "Missing remote host"; exit;
      fi
      if [ ! $REMOTEUSER ]; then echo "Missing remote user"; exit;
      fi
    ;;
  esac
}

#
# Make sure that SSH connection to remote exists.
#
require_ssh () {
  if [ $REMOTETYPE != "ssh" ]; then
    echo "SSH mode only."
    exit 1;
  fi
}

#
# Make sure that configuration for the local DB exists.
#
require_localdb () {
  if [ -z $LOCALDB ]; then echo "No local DB configured."; exit 1;
  fi
}

#
# Make sure that configuration for a remote DB exists.
#
require_remotedb () {
 if [ ! -n "$REMOTEDB" ]; then echo "No remote DB configured."; exit 1;
 fi
}

#
# Dump remote DB to file and download the file.
#
remote_dumpdb () {
  require_ssh
  require_remotedb
  DUMPPATH=".deploy/dump/$REMOTEINDEX/"
  deploy_log "Dumping $REMOTEDB on $REMOTEDBUSER@$REMOTEDBHOST ..."
  ssh $REMOTEUSER@$REMOTEHOST "mysqldump --skip-extended-insert -h $REMOTEDBHOST -u $REMOTEDBUSER -p $REMOTEDB > /tmp/temp.sql"
  deploy_log "Downloading dump ..."
  scp $REMOTEUSER@$REMOTEHOST:/tmp/temp.sql $DUMPPATH
}

#
# Downloads db dump from current remote and places file(s) in .deploy/dump. Handles any untar'ing/unzipping that is neccessary.
# The downloaded dump is not created by this script.
#
remote_downloaddbdump () {
  deploy_log "Downloading db dump ..."
  DUMPPATH=".deploy/dump/$REMOTEINDEX/"
  mkdir -p $DUMPPATH
  case $REMOTETYPE in
    "ssh" )
      scp -r $REMOTEUSER@$REMOTEHOST:$REMOTEDBDUMP $DUMPPATH
    ;;
    "ftp" )
      if [ -z $REMOTEDBDUMP ]; then
        exit;
      fi
      require_remotepw
      cd .deploy/dump/$REMOTEINDEX
      wget -r -nH -nv ftp://$REMOTEUSER:$REMOTEPASSWORD@$REMOTEHOST//$REMOTEROOT$REMOTEDBDUMP
      cd ../../..

    ;;
  esac

  deploy_log "Unpacking ..."
  cd $DUMPPATH
  for f in `ls *.gz`; do
    gunzip -f $f
  done

  cd $LOCALROOT
  deploy_log "Done"
}

#
# Dump local DB to file.
#
local_dumpdb () {
  require_localdb
  DUMPPATH="local.sql"
  deploy_log "Dumping $LOCALDB on $LOCALDBUSER@$LOCALDBHOST ..."
  mysqldump --skip-extended-insert $ignoretables -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB > $DUMPPATH
  deploy_log "Done."
}

#
# Import dump from remote site to local DB
# Dump(s) are fetched from ./deploy/dump/[remote_key]/*
# Dump(s) should be plain sql format. File extensions are ignored. DROP/CREATE/TRUNCATE on tables etc. are optional.
#
local_importremotedb () {
  require_localdb

  deploy_log "Importing database dump ...";

  DUMPPATH=".deploy/dump/$REMOTEINDEX/"
  for f in `ls $DUMPPATH`; do
    echo "File -> $f"
    size=`stat -c%s $DUMPPATH/$f`
    echo "Importing file $f ($size bytes) ..."
    # remove "create database" and "use" as we want to control database name from outside
    # there is a (at least theoretical) risc that this can remove something that is not a sql "CREATE DATABASE" or "USE" statement.
    sed -i.bak "s/^CREATE DATABASE.*$//g;s/^USE.*$//g" $DUMPPATH$f
    mysql -v -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB < $DUMPPATH$f
  done

  deploy_log "Done.";

}

#
# Execute SQL query on local DB.
#
local_sqlq () {	
  mysql -h $LOCALDBHOST -u $LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB -e "$1"
}

# 
# Executes SQL query on DB.
#
sqlq () {
  # for now, pass query on to local DB
  local_sqlq "$1"
}

# 
# Executes SQL query on DB.
#
deploy_sqlq () {
  # for now, pass query on to local DB
  local_sqlq "$1"
}

# Absolute path to this script
SCRIPT=$(readlink -f $0)
# Absolute path this script is in
SCRIPTPATH=`dirname $SCRIPT`
# The current working directory
LOCALROOT=`pwd`

# apply sane config default values
LOCALHTTPFOLDER="http"
REMOTEHTTPFOLDER="http"
REMOTEINDEX=""
REMOTETYPE="ssh" # "local", "ssh" or "ftp"
REMOTEPORT="22"
REMOTETITLE=""
LOCALSITENAME=`basename $LOCALROOT`

# timestamp - used for db dumps etc.
TIME=`date +"%y%m%d"`

# sed substitution commands for coloring output from diff and rsync
DIFFCOLORSED='s/^-/\x1b[41m-/;s/^+/\x1b[44m+/;s/$/\x1b[0m/'
# the last part removes lines with only "p" (for different permissions)
RSYNCCOLORSED="s/<f/\x1b[44m&/g;s/>f/\x1b[44m&/g;s/$/\x1b[0m/g;s/cd/\x1b[44m&/g;s/\*/\x1b[41m&/g;/\..\.\.\.p\.\.\.\.\..*$/d"

# global include and exclude files
if [ -f $SCRIPTPATH/deploy-include.txt ]; then
  INCLUDEFROM="--include-from $SCRIPTPATH/deploy-include.txt"
fi
if [ -f $SCRIPTPATH/deploy-exclude.txt ]; then
  EXCLUDEFROM="--exclude-from $SCRIPTPATH/deploy-exclude.txt"
fi

# the actual logged in user
CURRENTUSER=$(id -u -n)

# the actual logged in user unless changed in config
LOCALUSER=$CURRENTUSER

# read config file and override default values
read_config

# Make path and folder names sane. Make sure that dirs have trailing slashes and files haven't.
if [ -n "$2" ]; then
	# remove trailing slashes from all vars
	REMOTEROOT=`echo $REMOTEROOT | sed "s/\/*$//g"` 
	LOCALHTTPFOLDER=`echo $LOCALHTTPFOLDER | sed "s/\/*$//g"` 
	REMOTEHTTPFOLDER=`echo $REMOTEHTTPFOLDER | sed "s/\/*$//g"` 

	# make paths
	LOCALPATH=$2
	REMOTEPATH=`echo "$LOCALPATH" | sed "s/^$LOCALHTTPFOLDER/$REMOTEHTTPFOLDER/g"`  

	LOCALPATH=`echo $LOCALPATH | sed "s/\/*$//g"`
	REMOTEPATH=`echo $REMOTEPATH | sed "s/^\/*//g;s/\/*$//g"`

	# add trailing slashes
	LOCALROOT="$LOCALROOT/"
  if [ ! -z "$REMOTEROOT" ]; then
    REMOTEROOT="$REMOTEROOT/"
  fi
	LOCALHTTPFOLDER="$LOCALHTTPFOLDER/"
	if [ ! -z "$REMOTEHTTPFOLDER" ]; then
    REMOTEHTTPFOLDER="$REMOTEHTTPFOLDER/"
  fi

  # if path on local is a directory, add trailing slash, on local AND on remote
  if [ -d "$LOCALPATH" ]; then
    LOCALPATH="$LOCALPATH/"
    if [ ! -z "$REMOTEPATH" ]; then
      REMOTEPATH="$REMOTEPATH/"
    fi
  fi

  if [ "$REMOTETYPE" = "local" ] && [ "$LOCALROOT$LOCALPATH" = "$REMOTEROOT$REMOTEPATH" ]; then
    echo "Local and remote site are in the same place."
    exit
  fi
fi


require_site_root

#
# Attempt to determine type of system (CMS).
#
if [ -d http/typo3conf ]; then
  SYSTEM="typo3"
fi
if [ -d http/modules/node ]; then
  SYSTEM="drupal7"
fi

# include system specific pre-script. These can for instance fetch DB credentials.
if [ -f $SCRIPTPATH/deploy-pre-$SYSTEM ]; then
  . $SCRIPTPATH/deploy-pre-$SYSTEM
fi

#
# Reads a password from prompt. Show *'s
#
read_pw () {
  unset pw
  while IFS=`read -s -p "Enter :$prompt" -r char`
  do
    if [ "$char" = $'\0' ]
    then
      break
    fi
    prompt='*'
    pw="$pw$char"
  done
  echo
  return $pw
}

#
# Invoke hooks, executing more specific hooks before more general ones, 
# allowing any hook to prevent execution of the following ones.
#
deploy_hook () {
  EVENT=$1
  STOP_PROPAGATION=0

  # site hooks
  if [ -f $LOCALROOT/.deploy/hooks/$EVENT-$REMOTEINDEX ]; then
    . $LOCALROOT/.deploy/hooks/$EVENT-$REMOTEINDEX
  fi
  if [ -f $LOCALROOT.deploy/hooks/$EVENT ]; then
    deploy_log "Invoking hook $EVENT"
    . $LOCALROOT/.deploy/hooks/$EVENT
  fi

  # user hooks
  # ex. "downdb-drupal7-prod"
  if [ -f ~/.deploy/hooks/$EVENT-$SYSTEM-$REMOTEINDEX ] && [ ! $STOP_PROPAGATION ]; then
    . ~/.deploy/hooks/$EVENT-$SYSTEM-$REMOTEINDEX
  fi
  if [ -f ~/.deploy/hooks/$EVENT ] && [ ! $STOP_PROPAGATION ]; then
    . ~/.deploy/hooks/$EVENT
  fi

  # global hooks
  if [ -f $SCRIPTPATH/hooks/$EVENT-$SYSTEM-$REMOTEINDEX ] && [ ! $STOP_PROPAGATION ]; then 
    . $SCRIPTPATH/hooks/$EVENT-$SYSTEM-$REMOTEINDEX
  fi
  if [ -f $SCRIPTPATH/hooks/$EVENT-$SYSTEM ] && [ ! $STOP_PROPAGATION ]; then
    . $SCRIPTPATH/hooks/$EVENT-$SYSTEM
  fi
}

require_remotepw () {
  unset REMOTEPASSWORD
  prompt="FTP password for $REMOTEUSER@$REMOTEHOST : "
  read -p "$prompt" -r REMOTEPASSWORD
  echo
  mkdir -p .deploy/remote/$REMOTEINDEX
}

#
# Uploads the object at $1 traversing recursively creating dirs on the go.
#
deploy_ftp_up () {
  if [ -d $1 ]; then
    echo "mkdir $1" >> $LOCALROOT/.deploy/ftp-temp.txt
    for f in `ls $1`; do
      deploy_ftp_up $1/$f
    done
  fi
  if [ -f $1 ]; then
    echo "put $1" >> $LOCALROOT/.deploy/ftp-temp.txt
  fi
}

deploy_http_down () {
	local path=$1
	wget "http://$REMOTEURL/deploy/$REMOTEKEY/down.php?a=down&p=$path" -O .deploy/temp
      
  for T in `cat .deploy/temp`; do 
    local type=`echo $T | cut -d ";" -f 1`;
    local obj=`echo $T | cut -d ";" -f 2`;
    if [ "$type" = "d" ]; then
      mkdir -p "$path/$obj"
      deploy_http_down "$path/$obj"
    fi    
    if [ "$type" = "f" ]; then
      wget "http://$REMOTEURL/deploy/$REMOTEKEY/down.php?a=down&p=$path/$obj" -O "$path/$obj"
    fi    
  done
}


strstr () {
	case "$1" in 
	  *$2* )
	    return 1;
	  ;;
	  * )
	    return 0;	
	  ;;
	esac
}


# add site specific include and exclude file
if [ -f .deploy/include.txt ]; then
  INCLUDEFROM="$INCLUDEFROM --include-from .deploy/include.txt"
fi
if [ -f .deploy/exclude.txt ]; then
  EXCLUDEFROM="$EXCLUDEFROM --exclude-from .deploy/exclude.txt"
fi

# write remote title to stdout
if [ -n "$REMOTETITLE" ] && [ "$1" != "remote" ]; then
  echo "On remote $REMOTETITLE"
fi

if [ $handled ]; then
  exit 0;
fi

CMD=$1
COMMAND=$CMD

#
# Invoke "pre"-hook
#
deploy_hook "pre-$CMD"

#
# Invoke "instead"-hook
#
deploy_hook $CMD

# TODO : HOW TO handle this ?
if [ -f ".deploy/hooks/$CMD-$REMOTEINDEX" ]; then
  . ".deploy/hooks/$CMD-$REMOTEINDEX"
  COMMAND="_replaced"
fi

# handle system specific actions
if [ -f $SCRIPTPATH/deploy-$SYSTEM ]; then
  . $SCRIPTPATH/deploy-$SYSTEM
fi


#
# Now go to action
#
case "$COMMAND" in
  "remote" )
    if [ ! -n "$2" ]; then
      echo "Usage: deploy remote <remote>";
   
	    if [ -f .deploy/config ]
	    then
	      rs=",local,"
	      while read p; do
	        f=`echo $p | cut -d = -f 1`
	        r=`echo $f | cut -d . -f 1`
	        if [ ! -z $r ]; then
	          strstr $rs ",$r,"
            if [ $? -eq 0 ]; then
              if [ "$r" = "$REMOTEINDEX" ]; then
  	            echo "* $r"
	            else
	              echo "  $r"
   	          fi
	   	        rs="$rs,$r,"
  	        fi
  	      fi
 	        
	      done < .deploy/config
	    fi
    else
      REMOTEINDEX=$2
      write_state
      read_config
      echo "Switched to remote $REMOTETITLE"
    fi
    ;;
 
  "config" )
    echo "System           : $SYSTEM"
    echo "Local user       : $LOCALUSER"
    echo "Remote host      : $REMOTEHOST"
    echo "Remote user      : $REMOTEUSER"
    echo "Remote root      : $REMOTEROOT"
    echo "Local DB host    : $LOCALDBHOST"
    echo "Local DB user    : $LOCALDBUSER"
    if [ -z $LOCALDBPASSWORD ]; then
      echo "Local DB pw      : unknown";
    else
      echo "Local DB pw      : OK";
    fi
    echo "Local DB         : $LOCALDB"
    echo "Remote DB host   : $REMOTEDBHOST"
    echo "Remote DB user   : $REMOTEDBUSER"
    if [ -z $REMOTEDBPASSWORD ]; then
      echo "Remote DB pw     : unknown";
    else
      echo "Remote DB pw     : OK";
    fi
    echo "Remote DB        : $REMOTEDB"    
    echo "Remote DB backup : $REMOTEDBDUMP"
    
    if [ "ssh" = "$REMOTETYPE" ]; then
      echo -n "Local PHP        : "
      php --version | sed -n 1p
      echo -n "Remote PHP       : "
      ssh $REMOTEUSER@$REMOTEHOST "php --version | sed -n 1p"
    fi
    ;;
 
  #
  # Will make a rsync dry-run or a diff depending on type of localpath.
  #
  "diff" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy diff <path>"; exit 1; 
    fi

    if [ -f $LOCALPATH ]; then echo -n "Local file  : "; ls -l $LOCALPATH
    fi

    echo "Blue lines are local - red are remote"
    
    case "$REMOTETYPE" in
      "local" )
        if [ -f $LOCALPATH ] && [ -f $REMOTEROOT$REMOTEPATH ]
        then          
          echo -n "Remote file : "
          ls -l $REMOTEROOT$REMOTEPATH
          diff -w -u $REMOTEROOT$REMOTEPATH $LOCALPATH | sed $DIFFCOLORSED
        else
          rsync -avnci $INCLUDEFROM $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH | grep ">f" | sed $RSYNCCOLORSED
        fi

      ;;
      "ssh" )
        if [ -f $LOCALPATH ]
        then
          echo -n "Remote file : "
          ssh -p$REMOTEPORT $REMOTEUSER@$REMOTEHOST "cd $REMOTEROOT; ls -l $REMOTEPATH"
 
          # do an actual diff on two files
          ssh -p$REMOTEPORT $REMOTEUSER@$REMOTEHOST "cat $REMOTEROOT$REMOTEPATH" | diff -w -u - "$LOCALPATH" | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]
        then
          # diff folder structure using rsync dry-run
          rsync -avnci --delete $INCLUDEFROM $EXCLUDEFROM --rsh="ssh -p$REMOTEPORT" ${2%/}/ $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED
        fi
      ;;

      "ftp" )
        require_remotepw
        deploy_log "Syncing local cache from remote ..."
        cd .deploy/remote/$REMOTEINDEX
        wget -r -nH -nv ftp://$REMOTEUSER:$REMOTEPASSWORD@$REMOTEHOST//$REMOTEROOT$REMOTEPATH
        cd ../../..
        deploy_log "Done."
        if [ -f $LOCALPATH ]
        then
          # do an actual diff on two files
          diff -w -u .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH $LOCALPATH | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]
        then
          # diff structures using rsync
          echo "-avnci --delete $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED"
          rsync -avnci --delete $INCLUDEFROM $EXCLUDEFROM $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED

        fi

      ;;
    esac
    ;;

  "diffdb" )
    # do a diff on the two db-dump files
    LOCAL="local.sql"
    REMOTE="$REMOTEINDEX.sql"

    if [ ! -f $LOCAL ]
      then echo "no local dump - use dumplocaldb"; exit;
    fi
    if [ ! -f $REMOTE ]
      then echo "no remote dump - use dumpremotedb"; exit;
    fi

    diff $LOCAL $REMOTE | sed $DIFFCOLORSED
  ;;
 
  # diff and grep for text within diff result
  # TODO : remotetype ftp not implemented 
  "diffsearch" )
    if [ ! -n "$3" ]; then echo "Usage: deploy diffsearch <path> <string>"; exit 1;
    fi

    echo "Diffing '$LOCALPATH' and searching for '$3' ...";
    echo "Blue lines are added on local - red are removed"

    case "$REMOTETYPE" in 
      "local" )
        if [ -f $LOCALPATH ]; then
          diff -w -u $REMOTEROOT$REMOTEPATH $LOCALPATH | grep $3 | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]; then
          rsync -avnc $INCLUDEFROM $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH | grep $3 | sed $RSYNCCOLORSED
        fi
      ;;
      
      "ssh" )
        if [ -f $LOCALPATH ]; then
          ssh $REMOTEUSER@$REMOTEHOST "cat $REMOTEROOT$REMOTEPATH" | diff -w -u - "$LOCALPATH" | grep $3 | sed $DIFFCOLORSED
        fi
        if [ -d $LOCALPATH ]; then
          rsync -avnc $INCLUDEFROM $EXCLUDEFROM ${2%/}/ $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH | grep $3 | sed $RSYNCCOLORSED
        fi
      ;;
      
      "ftp" )
      ;;
    esac  
  ;;
  "down" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy down <path>"; exit 1;
    fi

    
    # check if "http/" is owned by the current user. If not, downloading files will probably cause trouble. Confirm.
    HTTPOWNER=$(stat -c %U http)
    if [ $HTTPOWNER != $LOCALUSER ]; then
      deploy_confirm_or_exit "You are not $HTTPOWNER. Any new files downloaded will be owned by $CURRENTUSER";
    fi

    deploy_log "Downloading $LOCALPATH ...";
    case "$REMOTETYPE" in
      "local" )
        if [ $LOCALUSER != $CURRENTUSER ]; then 
          su $LOCALUSER -c "rsync -avci $INCLUDEFROM $EXCLUDEFROM $REMOTEROOT$REMOTEPATH $LOCALPATH"
        else
          rsync -avci $INCLUDEFROM $EXCLUDEFROM $REMOTEROOT$REMOTEPATH $LOCALPATH | sed $RSYNCCOLORSED        
        fi      
        ;;
      "ssh" )
        # download structure or single file using rsync
        # we use --delete when downloading
        if [ $LOCALUSER != $CURRENTUSER ]; then 
          echo "Switching to $LOCALUSER"
          su $LOCALUSER -c "rsync -avi $INCLUDEFROM $EXCLUDEFROM --delete --rsh='ssh -p$REMOTEPORT' $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH $LOCALPATH"
        else
          # -r, --recursive recurse into directories
          # -l, --links copy symlinks as symlinks
          # -p, --perms preserve permissions
          # -t, --times preserve modification times
          # -g, --group preserve group
          # -o, --owner preserve owner (super-user only)
          # -D same as --devices --specials
          rsync -avic $INCLUDEFROM $EXCLUDEFROM --rsh="ssh -p$REMOTEPORT" $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH $LOCALPATH
        fi
        ;;
      "ftp" )
        require_remotepw
        cd .deploy/remote/$REMOTEINDEX 
        wget -r -nH ftp://$REMOTEUSER:$REMOTEPASSWORD@$REMOTEHOST//$REMOTEPATH
        cd ../../..
        rsync -avi $INCLUDEFROM $EXCLUDEFROM .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH $LOCALPATH
        ;;
        
      "http" | "https" )  # VERY experimental ! Not sure how binary safe this is.
        cd .deploy/remote/$REMOTEINDEX 
        deploy_http_down
   #     rsync -avi $INCLUDEFROM $EXCLUDEFROM .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH $LOCALPATH
        cd ../../..
      ;;
    esac
    deploy_log "Done.";

    ;;

  
  #
  # Would probably not be called directly in real life, as it is part of "downdb"
  #
  "downdbdump" )
    remote_downloaddbdump
    ;;
  
  #
  # Copy remote database to local.
  #
  "downdb" )
    # if a dump path is defined, use it - otherwise, make a dump
    if [ -n $REMOTEDBDUMP ]; then
      remote_downloaddbdump
    else      
      remote_dumpdb
    fi
    
    local_importremotedb
    ;;
   
    
  "dumplocaldb" )
    if [ -z "$LOCALDB" ]; 
      then echo "Missing localdb"; exit 1;
    fi
    DUMPPATH=".deploy/dump/local.sql"
    echo "Dumping to $DUMPPATH ..."
    mysqldump --skip-extended-insert $ignoretables -h $LOCALDBHOST -u $LOCALDBUSER -p $LOCALDB > $DUMPPATH
    ;;

  # 
  "dumpremotedb" )
    remote_dumpdb
    ;;

  #
  "importremotedb" )
    local_importremotedb
  ;;
  
	#
	"invokehook" )
	  if [ -z "$2" ]; then 
	    echo "Usage: deploy $1 <hook>"; 
	    echo "  hook can be post-downdb, pre-down etc."
	    exit 1; 
    fi
    deploy_hook "$2"
    
	;;
  # run a sql query on local db
  "sqlq" )
    if [ ! -n "$2" ]; then echo "Usage: deploy sqlq <sql>"; exit 1;
    fi
    sqlq "$2"
    ;;
    
  "up" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy up <path>"; exit 1; 
    fi
    deploy_confirm_or_exit "This will upload $LOCALPATH to $REMOTEINDEX : $REMOTETITLE.";
    deploy_log "Uploading $LOCALPATH ...";
    case $REMOTETYPE in 
      "local" )
        if [ -n "$REMOTEUSER" ]; then 
          su $REMOTEUSER -c "rsync -avci $INCLUDEFROM $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH"
        else
          rsync -avci $INCLUDEFROM $EXCLUDEFROM $LOCALPATH $REMOTEROOT$REMOTEPATH | sed $RSYNCCOLORSED
        fi
      ;;
      "ssh" )
        rsync -avci $INCLUDEFROM $EXCLUDEFROM $LOCALPATH $REMOTEUSER@$REMOTEHOST:$REMOTEROOT$REMOTEPATH
      ;;
      "ftp" )
        require_remotepw
        rsync -avci $INCLUDEFROM $EXCLUDEFROM $LOCALPATH .deploy/remote/$REMOTEINDEX/$REMOTEROOT$REMOTEPATH
        
        echo  "
open $REMOTEHOST
user $REMOTEUSER $REMOTEPASSWORD
" > $LOCALROOT/.deploy/ftp-temp.txt
        cd .deploy/remote/$REMOTEINDEX

        deploy_ftp_up $REMOTEPATH
        ftp -nvp < $LOCALROOT/.deploy/ftp-temp.txt
#        rm $LOCALROOT/.deploy/ftp-temp.txt
      ;;
    esac
    deploy_log "Done."
    ;;
		
  # create tar with folder
  "dumplocal" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy dumplocal <path>"; exit 1;
    fi

    DUMPPATH=`echo $LOCALSITENAME-local-$LOCALPATH | sed 's/\//-/g'`
    echo $DUMPPATH

    tar -cvfz $DUMPPATH.tar.gz $LOCALPATH
    ;;

  "importlocaldb" )
    require_localdb
    if [ -z $2 ]; then
      echo "Usage: deploy importlocaldb <file>"
      exit 1;
    fi
    deploy_log "Importing database to local ..."
    mysql -h$LOCALDBHOST -u$LOCALDBUSER -p$LOCALDBPASSWORD $LOCALDB < $2
    deploy_log "Done."
    ;;
    
  #
  # Do "ls -l" on the remote site.
  #
  "ls" )
    if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy ls <path>"; exit 1; 
    fi
    case $REMOTETYPE in 
      "local" )
        ls -l $REMOTEROOT$REMOTEPATH
      ;;
      "ssh" )    
        ssh $REMOTEUSER@$REMOTEHOST "ls -l $REMOTEROOT$REMOTEPATH"
      ;;
      "ftp" )
        # TODO
      ;;
    esac
	;;
	
	"mkdir" )
	  if [ ! -n "$LOCALPATH" ]; then echo "Usage: deploy $1 <path>"; exit 1; 
    fi
    case $REMOTETYPE in 
      "local" )
        mkdir -p $REMOTEROOT$REMOTEPATH
      ;;
      "ssh" )    
        ssh $REMOTEUSER@$REMOTEHOST "mkdir -p $REMOTEROOT$REMOTEPATH"
      ;;
      "ftp" )
        # TODO
      ;;
    esac
  
	;;
  
  "_replaced" )
  ;;

  "log" )
    tail .deploy/log
  ;;
  
  * )
  
  echo "Usage: deploy <command> [path]
  General commands :
    config       
      Output configuration for local site and current remote.
    diff <path>
      Show files and folders in specified path on local that are not on remote or have different size or timestamp
    down <path>         
      Download the specified path from remote to local
    downdb  
      Dump remote db to file if necessary and possible, download dump and import into local db.
    dumplocaldb  
      Dump the local db to local file.
    dumpremotedb 
      Dump the remote db to local file. Not on FTP mode.
    up <path>
      Upload the specified path from local to remote
    remote [<remote>]
      List remotes or switch remote.";
  ;;


esac

if [ -f .deploy/temp.sql ]; then rm .deploy/temp.sql;
fi


#
# Invoke "post"-hooks
#
deploy_hook "post-$CMD"


